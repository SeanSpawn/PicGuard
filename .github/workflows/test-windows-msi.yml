name: Test Windows msi

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  msi:
    name: Create msi
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check msvc
        run: |
          $directories = Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC" -Directory | Where-Object { $_.Name -match '^[0-9]{1,}' }

          # 如果目录列表不为空，则找到最后一个目录
          if ($directories.Count -gt 0) {
              $lastDirectory = $directories[-1]
              Write-Output "最后一个以数字开头的目录是: $($lastDirectory.FullName)"
          } else {
              Write-Output "未找到以数字开头的目录"
          }

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Install wix toolset
        shell: pwsh
        run: |
          dotnet tool install --global wix
          wix --version

      - name: Configure .env
        run: |
          echo "$pwd"
          $bytes = echo $env:ENV_KEY | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64_WINDOWS }}

      - name: Update config
        shell: pwsh
        run: |
          echo $env:RUNNER_TEMP
          $certificatePath = "$env:RUNNER_TEMP\picguard.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)

          $yamlFile = ".\pubspec.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile

          # 获取环境变量的值
          $publisherName = (Get-Item -Path Env:WINDOWS_PUBLISHER_NAME).Value
          $identityName = (Get-Item -Path Env:WINDOWS_IDENTITY_NAME).Value
          $certificatePassword = (Get-Item -Path Env:WINDOWS_CERTIFICATE_PASSWORD).Value
          $publisher = (Get-Item -Path Env:WINDOWS_PUBLISHER).Value

          # 使用 yq 更新多个字段
          $updatedYamlContent = echo $yamlContent | yq e ".msix_config.publisher_display_name = `"$publisherName`" | .msix_config.identity_name = `"$identityName`" | .msix_config.certificate_path = `"$certificatePath`" | .msix_config.certificate_password = `"$certificatePassword`" | .msix_config.publisher = `"$publisher`"" -

          # 将更新后的内容写回文件
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_IDENTITY_NAME: ${{ secrets.WINDOWS_IDENTITY_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_PUBLISHER: ${{ secrets.WINDOWS_PUBLISHER }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env

      - name: Create msi
        shell: pwsh
        run: |
          $env:FLUTTER_BUILD_OUTPUT_DIR = "$pwd\build\windows\x64\runner\Release"
          $env:VISUAL_STUDIO_REDIST_DIR = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\14.40.33807\x64\Microsoft.VC143.CRT"
          dotnet build .\MSI\PicGuard\PicGuard.wixproj --arch x64 --configuration Release

      # Package the build.
      - name: Copy build for msi
        run: ls
        working-directory: MSI\PicGuard\bin\Release\en-US

      - uses: actions/upload-artifact@v4
        with:
          name: windows-msi-artifact
          path: |
            .\MSI\PicGuard\bin\Release\en-US\*.msi

      - name: Clean up
        if: ${{ always() }}
        run: |
          ls
          if (test-path -Path "$env:RUNNER_TEMP\picguard.pfx") {
            echo "$env:RUNNER_TEMP\picguard.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }

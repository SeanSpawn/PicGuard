plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def proKeystoreProperties = new Properties()
def proKeystorePropertiesFile = rootProject.file('key-pro.properties')
if (proKeystorePropertiesFile.exists()) {
    proKeystoreProperties.load(new FileInputStream(proKeystorePropertiesFile))
}

android {
    namespace "com.kjxbyz.picguard"
    compileSdkVersion 34
//    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.kjxbyz.picguard"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 24
        targetSdkVersion 34
        versionName flutterVersionName
        versionCode flutterVersionCode.toInteger()
    }

    // https://developer.android.com/build/configure-apk-splits
    splits {
        abi {
            enable true
            reset()
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        if (System.getenv("ANDROID_KEYSTORE_PATH")) {
            free {
                storeFile file(System.getenv("ANDROID_KEYSTORE_PATH"))
                keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
                keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            }
        } else {
            free {
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storePassword keystoreProperties['storePassword']
            }
        }

        if (System.getenv("ANDROID_KEYSTORE_PATH_PRO")) {
            pro {
                storeFile file(System.getenv("ANDROID_KEYSTORE_PATH_PRO"))
                keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS_PRO")
                keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD_PRO")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD_PRO")
            }
        } else {
            pro {
                storeFile proKeystoreProperties['storeFile'] ? file(proKeystoreProperties['storeFile']) : null
                keyAlias proKeystoreProperties['keyAlias']
                keyPassword proKeystoreProperties['keyPassword']
                storePassword proKeystoreProperties['storePassword']
            }
        }
    }

    flavorDimensions "default", "env"
    productFlavors {
        free {
            dimension "default"
            signingConfig signingConfigs.free
        }

        pro {
            dimension "default"
            signingConfig signingConfigs.pro
            applicationIdSuffix ".pro"
        }

        staging {
            dimension "env"
            applicationIdSuffix ".dev"
        }

        production {
            dimension "env"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
        }
        debug {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        jniLibs {
            // Enabling flag to compress JNI Libs to reduce APK size Ref: https://developer.android.com/topic/performance/reduce-apk-size?hl=zh-cn#extract-false
            useLegacyPackaging true
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

// To comply with F-Droid version code schema
ext.abiCodes = ["x86_64": 1, "armeabi-v7a": 2, "arm64-v8a": 3]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
        def flavorName = variant.flavorName
        def flavor = flavorName.replaceAll("(Staging|Production)", "")
        def suffix = flavorName.contains("Staging") ? ".pre" : ""
        def abi = output.getFilter(OutputFile.ABI)
        def abiVersionCode = project.ext.abiCodes.get(abi)
        def arch = abi == null ? "universal" : abi
        def versionCode = abiVersionCode == null ? variant.versionCode : variant.versionCode * 10 + abiVersionCode
        output.outputFileName = "PicGuard_${variant.versionName}+${versionCode}${suffix}-${flavor}_${arch}.apk"
        output.versionCodeOverride = versionCode
    }
}
